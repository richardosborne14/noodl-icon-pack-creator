[{"name":"/Start Page","nodes":[{"id":"a4b7e4d4-c01d-1267-30b6-c2b448b90067","type":"Page","parameters":{},"ports":[],"children":[{"id":"71dad269-ac5c-42a3-7fc1-fe69ae61930a","type":"Markdown","parameters":{"source":"1. Go to [Fontello](https://fontello.com) and create your webfont. You need to give the font a name to download it. This will be important later.\n\n2. Download the zip from Fontello.\n\n3. Upload the zip file to this app using the button below.\n\n4. Download the new zip file to your machine.\n\n5. Unzip and place the resulting folder in your 'noodl_modules' folder of your project.\n\n**Note: the folder name under 'noodl_modules' must match the name you used on Fontello before downloading.**"},"ports":[],"children":[]},{"id":"63046136-e405-e9fb-e642-1e70921125a3","type":"net.noodl.controls.button","parameters":{"label":"Upload Fontello zip for conversion","backgroundColor":"Success"},"stateParameters":{"hover":{"backgroundColor":"#49AD7FC1"}},"ports":[],"children":[]}]},{"id":"10fa011a-db2f-e573-47e6-ed69e091fbc1","type":"PageInputs","parameters":{},"ports":[],"children":[]},{"id":"3745547a-51f1-d867-8c61-e145fe01eade","type":"JavaScriptFunction","parameters":{"functionScript":"// Assuming you have the JSZip library loaded\n\n// Function to parse \"config.json\"\nasync function parseConfigJson(zip, folderName) {\n  // Access the \"config.json\" file\n  var configJson = zip.file(folderName + \"config.json\");\n\n  if (configJson) {\n    // Extract the content of \"config.json\"\n    var content = await configJson.async(\"text\");\n    // Parse and modify the content\n    var parsedConfig = JSON.parse(content);\n    // Make changes to the parsedConfig as needed\n\n    // Create a new object with the desired structure\n    var newConfig = {\n      \"name\": `fontello: ${parsedConfig.name}`,\n      \"type\": \"iconset\",\n      \"browser\": {\n        \"stylesheets\": [`noodl_modules/${parsedConfig.name}/styles.css`]\n      },\n      \"iconClass\": parsedConfig.css_use_suffix ? parsedConfig.css_prefix_text : \"\",\n      \"codeAsClass\": true,\n      \"icons\": []\n    };\n\n    // Extract the required properties from the original parsedConfig\n    newConfig.icons = parsedConfig.glyphs.map(function (glyph) {\n      return \"icon-\" + glyph.css;\n    });\n\n    return { parsedConfig: newConfig, name: parsedConfig.name };\n  } else {\n    throw new Error(\"config.json not found in the zip file\");\n  }\n}\n\n// Function to process the zip file\nasync function processZip(file) {\n  var reader = new FileReader();\n\n  // Read the contents of the file\n  await new Promise((resolve, reject) => {\n    reader.onload = function (e) {\n      resolve(e.target.result);\n    };\n    reader.onerror = function (e) {\n      reject(e.error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n\n  var arrayBuffer = reader.result;\n\n  // Create a new JSZip instance\n  var zip = new JSZip();\n\n  // Load the zip file\n  var contents = await zip.loadAsync(arrayBuffer);\n\n  // Retrieve the name of the folder inside the root\n  var folderName = contents.files[Object.keys(contents.files)[0]].name;\n  console.log(\"Folder name:\", folderName);\n\n  // Parse \"config.json\"\n  var { parsedConfig, name } = await parseConfigJson(contents, folderName);\n  // Perform operations with the parsed config\n  console.log(\"Parsed config:\", parsedConfig);\n\n  // Access other files and perform additional operations\n  const fontelloCssPath = folderName + \"css/\" + name + \".css\";\n  var fontelloCss = contents.file(fontelloCssPath);\n\n  // Create a new JSZip instance for the new zip file\n  var newZip = new JSZip();\n\n  // Add the modified files to the new zip\n  newZip.file(\"manifest.json\", JSON.stringify(parsedConfig, null, 2));\n  if (fontelloCss) {\n    var fontelloCssContent = await fontelloCss.async(\"text\");\n    // Modify the content of fontello.css as needed\n    fontelloCssContent = fontelloCssContent.replaceAll(\"../font/\" + name, \"./\" + name);\n\n    // Add the modified fontello.css to the new zip\n    newZip.file(\"styles.css\", fontelloCssContent);\n  } else {\n    console.log(fontelloCssPath + \" not found in the zip file\");\n  }\n\n  // Copy the font files to the new zip\n  var fontFiles = [\n    \".eot\",\n    \".svg\",\n    \".ttf\",\n    \".woff\",\n    \".woff2\"\n  ];\n\n  await Promise.all(\n    fontFiles.map(async function (fontFile) {\n      const filePath = folderName + \"font/\" + name + fontFile;\n      console.log(\"Copy \", filePath);\n      var file = contents.file(filePath);\n      if (file) {\n        var blob = await file.async(\"blob\");\n        newZip.file(name + fontFile, blob);\n      } else {\n        console.log(filePath + \" not found in the zip file\");\n      }\n    })\n  );\n\n  // Generate the new zip file\n  var newZipContent = await newZip.generateAsync({ type: \"blob\" });\n\n  // Save the new zip file or perform other operations with it\n  saveAs(newZipContent, name + \".zip\");\n}\n\nconst file = Inputs.File;\nawait processZip(file);"},"ports":[{"name":"in-File","displayName":"File","plug":"input","type":"*","group":"Inputs","index":4}],"children":[]},{"id":"aaaa452e-162f-0d1d-d39e-fa693e4984e3","type":"Open File Picker","parameters":{},"ports":[],"children":[]},{"id":"d99763cf-375c-4a05-9473-24648faa910f","type":"CSS Definition","parameters":{"style":".markdown {\n  font-family: 'Roboto', sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  color: #333;  /* You can adjust this to your preferred color */\n}"},"ports":[],"children":[]}],"connections":[{"sourceId":"63046136-e405-e9fb-e642-1e70921125a3","sourcePort":"onClick","targetId":"aaaa452e-162f-0d1d-d39e-fa693e4984e3","targetPort":"open"},{"sourceId":"aaaa452e-162f-0d1d-d39e-fa693e4984e3","sourcePort":"success","targetId":"3745547a-51f1-d867-8c61-e145fe01eade","targetPort":"run"},{"sourceId":"aaaa452e-162f-0d1d-d39e-fa693e4984e3","sourcePort":"file","targetId":"3745547a-51f1-d867-8c61-e145fe01eade","targetPort":"in-File"}],"ports":[],"roots":["a4b7e4d4-c01d-1267-30b6-c2b448b90067"]}]